package templates

templ ModmakeCLI(params Params) {
    <p>
        The CLI is 100% optional.
        It's provided to make working with Modmake builds a little more convenient.
        That being said, there are some features that are much easier to add to the CLI.
    </p>
    <p>
        Using plain <code>go run</code> is still a primarily supported Modmake invocation method, and likely will be in perpetuity, but the CLI can provide more consistency to both build resolution and invocation.
        It can also be used to set environment variables that may influence build behavior, providing a sort of build parameterization mechanism when used with <a href="https://pkg.go.dev/github.com/saylorsolutions/modmake#F">Format strings</a>.
    </p>
    <aside>
        By default, the CLI will change its working directory to the root of your Go module (the directory where <code>go.mod</code> resides) if not already run in that location.
        This behavior <i>can</i> be overridden, but it's not recommended, and this override may be removed in a later version.
    </aside>
    <p>
        Since this is a 100% Go tool, you could use <code>go install</code> to install the CLI, like this.
    </p>
    <code class="block">
        go install github.com/saylorsolutions/modmake/cmd/modmake@{params.ModmakeVersion}
    </code>
    <p>
        If you'd prefer, you can get a CLI release for your OS <a href="https://github.com/saylorsolutions/modmake/releases">here</a>. The releases have version information embedded within them for transparency.
    </p>
    <p>
        Once downloaded and added to your <code>PATH</code>, run <code>modmake --version</code> to see these details.
    </p>
}

templ ModmakeCLI_Resolution() {
    <p>
        By default, the CLI looks {"for"} your Modmake build in this order:
    </p>
    <ol>
        <li>In a directory called <code>modmake</code> at the root of your module.</li>
        <li>In a Go file called <code>build.go</code> at the root of your module.</li>
    </ol>
    <p>
        If none of the locations above are found, then you will need to tell the CLI where to locate your build code with.
        See <code>modmake --help</code> {"for"} details.
    </p>
    <aside>
        It's recommended to use the <code>modmake</code> directory for non-trivial build logic, so you can structure your build with additional files as needed for maintainability.
    </aside>
}

templ ModmakeCLI_Invocation() {
    <p>
        The CLI has its own flags that may be used to influence the Modmake build invocation context.
        To see a listing of these flags see the output of <code>modmake --help</code>
    </p>
    <p>
        Because a Modmake build may <i>also</i> accept flags, the user will need to disambiguate between CLI flags and build flags.
        To pass build flags through the CLI, prefix build flags and arguments with <code>--</code> like this.
    </p>
    <code class="block">
        modmake -e SOME_VAR=value -- --skip generate build
    </code>
}
